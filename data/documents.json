[
    {
        "title": "Introduction to ScheduleLua | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/",
        "content": "Introduction to ScheduleLua | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page Introduction to ScheduleLua \u200b ScheduleLua is a MelonLoader mod for Schedule 1 that allows you to write custom Lua scripts to extend and modify game functionality. This guide will help you understand the basics of ScheduleLua and get started with writing your own scripts. What is ScheduleLua? \u200b ScheduleLua is a modding framework that bridges the gap between the Schedule 1 game and Lua scripts. It exposes game functionality to Lua, allowing you to: Modify player attributes Modify existing item attributes Modify economy attributes Interact with NPCs in the game world Create custom UI elements and notifications Hook into game events and time changes Create custom console commands Interact with the game&#39;s economy and law systems And More How ScheduleLua Works \u200b ScheduleLua uses MelonLoader to hook into Schedule 1 at runtime. When the game starts, ScheduleLua: Loads all Lua scripts from the designated scripts folder Initializes a Lua environment for each script Exposes game functions to each Lua environment Calls initialization functions in each script Provides ongoing updates and event callbacks to scripts Your scripts run concurrently with the game, allowing you to respond to game events and modify game behavior in real-time. Lua Basics \u200b If you&#39;re new to Lua, here&#39;s a quick overview of the syntax: lua -- This is a comment -- Variables local name = &quot;Player&quot; local health = 100 local isActive = true -- Functions function SayHello (name) return &quot;Hello, &quot; .. name end -- Conditionals if health &gt; 50 then print ( &quot;Player is healthy&quot; ) elseif health &gt; 20 then print ( &quot;Player is wounded&quot; ) else print ( &quot;Player is critical&quot; ) end -- Loops for i = 1 , 10 do print (i) end -- Tables (Lua&#39;s main data structure) local player = { name = &quot;Player1&quot; , health = 100 , inventory = { &quot;ogkush&quot; , &quot;baggie&quot; , &quot;jar&quot; } } -- Accessing table properties print (player. name ) print (player. inventory [ 1 ]) For a more comprehensive Lua tutorial, check out the official Lua documentation . Next Steps \u200b Installation Guide - Learn how to install ScheduleLua Getting Started - Write your first ScheduleLua script Script Structure - Understand the structure of ScheduleLua scripts Lifecycle Hooks - Learn about the various script lifecycle events API Reference - Explore the full ScheduleLua API Examples - See example scripts in action Help improve this page Last updated: Pager Next page Installation Released as Beta Software under the GPL-3.0 License. Built with VitePress window.__VP_HASH_MAP__=JSON.parse(\"{\\\"api_core_commands.md\\\":\\\"Bk-HA0si\\\",\\\"api_core_gameobjects.md\\\":\\\"BCEKvkno\\\",\\\"api_core_logging.md\\\":\\\"BJhEtnWE\\\",\\\"api_core_timing.md\\\":\\\"DqUutz9D\\\",\\\"api_economy_atm.md\\\":\\\"CnC_eQ9C\\\",\\\"api_economy_index.md\\\":\\\"B1eutHxq\\\",\\\"api_economy_money.md\\\":\\\"DKOu9caE\\\",\\\"api_economy_transactions.md\\\":\\\"LdadQiQh\\\",\\\"api_helper_index.md\\\":\\\"BEuHsPL8\\\",\\\"api_index.md\\\":\\\"Dlgp4_ax\\\",\\\"api_law_curfew.md\\\":\\\"s18xc-dW\\\",\\\"api_law_index.md\\\":\\\"DaDl-IY-\\\",\\\"api_map_index.md\\\":\\\"DXGMpS-6\\\",\\\"api_npc_finding.md\\\":\\\"BZc8CBMU\\\",\\\"api_npc_index.md\\\":\\\"lqJ9VM8g\\\",\\\"api_npc_managing.md\\\":\\\"D3k8TSPN\\\",\\\"api_npc_schedule.md\\\":\\\"BmdhO90W\\\",\\\"api_player_index.md\\\":\\\"DhPwfxL6\\\",\\\"api_player_inventory.md\\\":\\\"CyC5NQxt\\\",\\\"api_player_movement.md\\\":\\\"BLnpf70g\\\",\\\"api_player_status.md\\\":\\\"o6-kcMTr\\\",\\\"api_time_events.md\\\":\\\"Czf5VsUr\\\",\\\"api_time_game-time.md\\\":\\\"BXyoqc79\\\",\\\"api_ui_custom-ui.md\\\":\\\"B4zoGN7e\\\",\\\"api_ui_dialogs.md\\\":\\\"C0-jjdJt\\\",\\\"api_ui_index.md\\\":\\\"Ch8ck-6A\\\",\\\"api_ui_messages.md\\\":\\\"BSCa7VuW\\\",\\\"api_ui_notifications.md\\\":\\\"CT78aPWp\\\",\\\"doc_organization.md\\\":\\\"Cpe3KE15\\\",\\\"examples_curfew.md\\\":\\\"DJNQMgUl\\\",\\\"examples_economy.md\\\":\\\"DJIVBdhl\\\",\\\"examples_index.md\\\":\\\"DWNL_JRq\\\",\\\"examples_registry.md\\\":\\\"D0WBUEfg\\\",\\\"examples_ui.md\\\":\\\"G79LgWwX\\\",\\\"guide_best-practices.md\\\":\\\"Dt6g62hX\\\",\\\"guide_contributing.md\\\":\\\"DgXXCjeV\\\",\\\"guide_development-status.md\\\":\\\"BKMijw8E\\\",\\\"guide_getting-started.md\\\":\\\"Ce_5sbDf\\\",\\\"guide_index.md\\\":\\\"LG02Z1rF\\\",\\\"guide_installation.md\\\":\\\"Bo_v6db4\\\",\\\"guide_lifecycle-hooks.md\\\":\\\"B1AcceVg\\\",\\\"guide_limitations.md\\\":\\\"Q6RNd8po\\\",\\\"guide_reporting-"
    },
    {
        "title": "Installation Guide | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/installation.html",
        "content": "Installation Guide | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page Installation Guide \u200b This guide will walk you through the process of installing the ScheduleLua beta for Schedule 1. Beta Software Notice: ScheduleLua is currently in active development. Expect bugs, incomplete features, and potential changes to the API between versions. Prerequisites \u200b Before installing ScheduleLua, you&#39;ll need: Schedule 1 (Steam) The game must be running on the Mono backend version, which is available on the &quot;alternate&quot; or &quot;alternate-beta&quot; Steam branches In Steam, right-click on Schedule 1 \u2192 Properties \u2192 Betas \u2192 Select &quot;alternate&quot; or &quot;alternate-beta&quot; ScheduleLua is NOT compatible with the main branch or &quot;beta&quot; branch, which use IL2CPP MelonLoader version 0.7.0 or newer Basic familiarity with file management Backup of your save files (recommended for beta testing) Step 1: Install MelonLoader \u200b If you haven&#39;t already installed MelonLoader, follow these steps: Download the latest MelonLoader installer from the official GitHub releases page Run the installer executable When prompted, select your Schedule 1 executable file (typically located at C:\\Program Files (x86)\\Steam\\steamapps\\common\\Schedule I\\Schedule I.exe ) Click &quot;INSTALL&quot; and wait for the installation to complete Verify that the installation was successful by checking for a MelonLoader folder in your Schedule 1 game directory Step 2: Install ScheduleLua Beta \u200b Download the latest ScheduleLua beta release from Thunderstore (ZIP file) Drag the Mods and UserLibs folders into your Schedule 1 game directory Your directory structure should look like this: Schedule 1/ \u251c\u2500\u2500 Mods/ \u2502 \u251c\u2500\u2500 Scripts \u2502 \u251c\u2500\u2500 ScheduleLua.dll \u2502 \u2514\u2500\u2500 ... (other mod DLLs) \u251c\u2500\u2500 UserLibs/ \u2502 \u251c\u2500\u2500 MoonSharp.Interpreter.dll \u2502 \u2514\u2500\u2500 ... (other library DLLs) \u2514\u2500\u2500 ... (other game files) Step 3: Install Example Scripts (Optional) \u200b Copy the example Lua scripts from the ScheduleLua GitHub to your Scripts folder The beta includes working examples that demonstrate currently available features: example.lua - Uses stable core functionality ui_example.lua - Demonstrates notifications (note: advanced UI is experimental) See Resources directory in the ScheduleLua repository for more info Step 4: Verify Installation \u200b Launch Schedule 1 Wait for the game to load Look for messages indicating that ScheduleLua has loaded successfully inside MelonLoader console: [ScheduleLua] Initializing ScheduleLua... [ScheduleLua] Initializing Lua engine... [ScheduleLua] Initializing GUI system... [ScheduleLua] Lua GUI system initialized [ScheduleLua] Loading scripts from Scripts directory [ScheduleLua] Loaded X scripts successfully If you see these messages, congratulations! The ScheduleLua beta is installed and working correctly. Troubleshooting \u200b Known Beta Issues \u200b UI Windows : If UI windows don&#39;t appear correctly, restart the game Script Errors : Some API functions mentioned in documentation may not be fully implemented Performance : Heavy script usage may cause performance issues in the current beta Beta Error Reporting \u200b If you encounter issues with the beta: Check the Known Issues on GitHub If your issue isn&#39;t listed, report it with: Clear description of the problem Steps to reproduce Log files from Schedule 1/MelonLoader/Latest.log Your script code (if applicable) Common Issues \u200b MelonLoader Not Loading \u200b If MelonLoader isn&#39;t loading properly: Verify that you&#39;re using a compatible version of MelonLoader (0.7.0 Open Beta) Reinstall MelonLoader using the official installer Check the game&#39;s launch options in Steam and remove any conflicting parameters ScheduleLua Not Loading \u200b If ScheduleLua isn&#39;t loading: Verify that you&#39;re using the correct Steam branch (&quot;alternate&quot; or &quot;alternate-beta&quot;) as ScheduleLua only works with the Mono version of the game Verify that ScheduleLua.dll is in the correct location ( Schedule 1/Mods/ ) Check that moonsharp.dll is in the correct location ( Schedule 1/UserLibs/ ) Look for error messages in the MelonLoader console logs Scripts Not Loading \u200b If your scripts aren&#39;t loading: Ensure they&#39;re in the correct directory ( Schedule 1/Scripts/ ) Check script syntax for errors (the MelonLoader"
    },
    {
        "title": "Getting Started with ScheduleLua (Beta) | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/getting-started.html",
        "content": "Getting Started with ScheduleLua (Beta) | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page Getting Started with ScheduleLua (Beta) \u200b This guide will help you get started with writing your first Lua scripts for the ScheduleLua beta. It focuses on currently implemented features that you can use right away. Beta Notice: ScheduleLua is in active development. This guide focuses on stable features implemented in the current beta. For the latest implementation status, see the Development Status page. Prerequisites \u200b Before getting started, make sure you have: Schedule 1 game with MelonLoader installed ScheduleLua installed and working Basic understanding of Lua programming (or willingness to learn) Your First Script \u200b Let&#39;s create a simple script that demonstrates working features in the current beta. Create a new file in your Scripts folder called hello_world.lua : lua -- hello_world.lua - A simple first script for ScheduleLua beta -- This function runs when your script is loaded function Initialize () Log ( &quot;Hello World script loaded!&quot; ) -- Register a simple command RegisterCommand ( &quot;hello&quot; , &quot;Says hello to the player&quot; , &quot;hello&quot; , function (args) local playerState = GetPlayerState () local playerName = playerState and playerState. playerName or &quot;Player&quot; Log ( &quot;Hello, &quot; .. playerName .. &quot;!&quot; ) -- Show a notification to the player ShowNotification ( &quot;Hello World&quot; , &quot;Welcome to ScheduleLua Beta!&quot; , 3 ) end ) -- Get and log the current game time local timeString = FormatGameTime ( GetGameTime ()) Log ( &quot;Current game time: &quot; .. timeString) return true -- Return true to indicate successful initialization end -- This function is called when game time changes function OnTimeChanged (hour, minute) if hour == 8 and minute == 0 then Log ( &quot;It&#39;s 8:00 AM!&quot; ) end end -- This function runs when your script is unloaded function Shutdown () Log ( &quot;Hello World script unloaded!&quot; ) UnregisterAllCommands () end Understanding the Script \u200b Let&#39;s break down what this script does: Initialize() - This function runs when your script is loaded by ScheduleLua and returns true on success Log() - Writes messages to the MelonLoader console RegisterCommand() - Registers a custom command that can be typed in the console GetPlayerState() - Gets information about the current player ShowNotification() - Displays a UI notification FormatGameTime() - Formats the game time value as a string GetGameTime() - Gets the current game time value OnTimeChanged() - Event handler that runs when game time changes Shutdown() - Runs when your script is unloaded and cleans up resources Lifecycle Events \u200b Your scripts will need to use ScheduleLua&#39;s lifecycle events to ensure your script executes at the right times: lua -- Called when script is loaded function Initialize () Log ( &quot;Script loaded!&quot; ) end -- Called when script is unloaded function Shutdown () Log ( &quot;Script unloaded!&quot; ) end -- Called each frame (use sparingly) function Update () -- This runs very frequently -- Avoid heavy operations here end -- Called when game time changes function OnTimeChanged (hour, minute) if hour == 8 and minute == 0 then Log. Info ( &quot;It&#39;s 8:00 AM!&quot; ) end end How to Test Your Script \u200b Save your script in the C:\\Program Files (x86)\\Steam\\steamapps\\common\\Schedule I\\Mods\\ScheduleLua\\Scripts folder Launch Schedule 1 and load into a game Enable and open the console (~ key enabled from settings) Type your command, e.g., hello Watch for your script&#39;s output in the console Debugging Tips for Beta \u200b Check the console for error messages Use Log() for additional information Remember that some features mentioned in documentation may not be fully implemented yet or fully documented properly If a feature isn&#39;t working, check the Development Status page, and if it is not accurate, feel free to open a GitHub Issue on the Documentation repo. Next Steps \u200b Now that you&#39;ve created your first script, you can: Experiment with the stable APIs mentioned above Check the Examples section for working code examples Review the API Reference for details on implemented functions Join the Schedule 1 Modding Discord to share your ex"
    },
    {
        "title": "Development Status | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/development-status.html",
        "content": "Development Status | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page Development Status \u200b Beta Software: ScheduleLua is currently in beta development. This page tracks the implementation status of various features. Implementation Status \u200b This page provides a transparent overview of what&#39;s currently working in ScheduleLua beta, what&#39;s partially implemented, and what&#39;s planned for future releases. Status Legend \u200b \u2705 Implemented - Feature is fully working and stable \ud83d\udfe1 Partial - Feature is partially implemented but may have limitations \ud83d\udd04 In Progress - Feature is actively being developed \ud83d\udcc5 Planned - Feature is planned for future implementation \u274c Not Planned - Feature is not yet planned Core Systems \u200b Feature Status Notes Script Loading \u2705 Scripts are properly loaded from the Scripts directory Error Handling \ud83d\udfe1 Basic error reporting works, advanced diagnostics planned Hot Reloading \u2705 Scripts can be manually reloaded with the luareload command or automatically reloaded upon file change when the EnableHotReload MelonPreference is enabled Lifecycle Event Hooks \u2705 Core events like Initialize(), Update(), and Shutdown() function properly Performance Profiling \ud83d\udd04 Basic performance monitoring is in development Debugging Tools \ud83d\udcc5 Comprehensive debugging utilities planned Example Scripts Status \u200b Most example scripts located in the Resources directory are fully functional and demonstrate working features of the API. If you&#39;re looking for working examples of API usage, refer to these files: example.lua - Core API functionality ui_example.lua - UI system features registry_example.lua - Data storage functionality ( Note : May have limited functionality as Registry system is still in development) economy_example.lua - Economy and player money systems curfew_example.lua - Law/curfew systems API Implementation \u200b Core API \u200b Function Status Notes Log(message) \u2705 Prints a message to the console LogWarning(message) \u2705 Prints a warning message to the console LogError(message) \u2705 Prints an error message to the console Wait(seconds, callback) \u2705 Executes a function after a specified delay Delay(seconds, callback) \u2705 Alias for Wait() Command API \u200b Function Status Notes RegisterCommand(name, description, usage, callback) \u2705 Registers a custom console command UnregisterCommand(name) \u2705 Removes a registered command UnregisterAllCommands() \u2705 Removes all commands registered by the script IsCommandRegistered(name) \u2705 Checks if a command is already registered GetGameCommands() \u2705 Returns a table of all available game commands Time API \u200b Function Status Notes GetGameTime() \u2705 Returns the current in-game time (minutes) FormatGameTime(timeValue) \u2705 Formats a time value as a string (HH:MM) GetGameDay() \u2705 Returns the current day name (e.g., &quot;Monday&quot;) GetGameDayInt() \u2705 Returns the current day as a number (1-7) IsNightTime() \u2705 Returns true if it&#39;s currently night time SetTime(timeValue) \ud83d\udcc5 Sets the game time to the specified value Player API \u200b Function Status Notes GetPlayer() \u2705 Returns the player object GetPlayerState() \u2705 Returns a table with comprehensive player information GetPlayerPosition() \u2705 Returns the player&#39;s position as a Vector3 SetPlayerPosition(x, y, z) \u2705 Sets the player&#39;s position GetPlayerEnergy() \u2705 Returns the player&#39;s current energy level SetPlayerEnergy(amount) \u2705 Sets the player&#39;s energy level GetPlayerHealth() \u2705 Returns the player&#39;s current health SetPlayerHealth(amount) \u2705 Sets the player&#39;s health GetPlayerRegion() \u2705 Returns the name of the region the player is in IsPlayerInRegion(regionName) \u2705 Checks if the player is in the specified region GetPlayerName() \u2705 Returns the player&#39;s name GetPlayerMovementState() \u2705 Returns the player&#39;s current movement state Economy API \u200b Function Status Notes GetPlayerCash() \u2705 Returns the player&#39;s current cash amount AddPlayerCash(amount) \u2705 Adds the specified amount to player&#39;s cash RemovePlayerCash(amount) \u2705 Removes the specified amount from player&#39;s cash GetPlayerOnlineBalance() \u2705 Returns the player&#39;s online bank balance AddOnlineBalance(amount) \ud83d\udfe1 Adds to player&#39;s online balance but UI doesn&#39;t update RemoveOnlineBalance(amount) \ud83d\udfe1 Removes from player&#39;s online balance but UI doesn&#39;t update GetLifetimeEarnings() \u2705 Returns "
    },
    {
        "title": "API Reference | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/api/",
        "content": "API Reference | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Core API Overview Logging Commands Timing GameObjects Player API Overview Status Movement Inventory NPC API Overview Finding NPCs Managing NPCs Time API Game Time Events Map API Regions Helper Functions Vector Operations UI API (Partial) Overview Notifications Custom UI Economy API (Partial) Overview Transactions Law API (Partial) Overview Curfew On this page API Reference \u200b This section provides documentation for the ScheduleLua API functions and modules. Beta Development Notice: ScheduleLua is currently in beta development. APIs may change, and some features described here are not yet fully implemented. Implementation Status \u200b The ScheduleLua API is being actively developed. Here&#39;s the current implementation status of major API categories: API Category Status Core API \u2705 Stable Player API \ud83d\udd04 Partial Time API \ud83d\udd04 Partial NPC API \ud83d\udd04 Partial Map API \ud83d\udd04 Partial Helper Functions \ud83d\udd04 Partial UI API \ud83d\udd04 Partial Registry API \ud83d\udd04 Partial Economy API \ud83d\udd04 Partial Law API \ud83d\udcdd Planned See the Development Status page for more detailed information. API Categories \u200b Core API - \u2705 Stable \u200b Core functionality including logging, commands, timing, and general game object manipulation. Player API - \ud83d\udd04 Partial \u200b Functions for interacting with the player character, including movement, inventory, stats, and state. NPC API - \ud83d\udd04 Partial \u200b Tools for finding, managing, and interacting with NPCs in the game world. Time API - \ud83d\udd04 Partial \u200b Functions for getting and manipulating game time, as well as time-based events. Map API - \ud83d\udd04 Partial \u200b Functions for working with map regions and world interaction. Helper Functions - \ud83d\udd04 Partial \u200b Utility functions such as Vector3 operations to simplify common tasks. UI API - \ud83d\udd04 Experimental \u200b Create notifications and basic UI elements. Advanced features are still in development. Registry API - \ud83d\udd04 Experimental \u200b Store and retrieve data persistent across script executions and game sessions. Economy API - \ud83d\udd04 Partial \u200b Interact with the game&#39;s economy system, including player money and transactions. Law API - \ud83d\udcdd Planned \u200b Interact with the game&#39;s law system, including curfew management. Function Naming Conventions \u200b ScheduleLua follows consistent naming conventions to make the API intuitive: Get* - Functions that retrieve data (e.g., GetPlayerPosition , GetGameTime ) Set* - Functions that modify data (e.g., SetPlayerHealth , SetNPCPosition ) Find* - Functions that search for specific entities (e.g., FindNPC , FindGameObject ) Is* - Functions that return boolean values (e.g., IsNightTime , IsNPCInRegion ) Register* - Functions that register callbacks or commands (e.g., RegisterCommand ) Unregister* - Functions that remove registered callbacks or commands (e.g., UnregisterCommand ) On* - Callback functions triggered by specific events (e.g., OnPlayerReady , OnDayChanged ) Function Documentation Format \u200b Each function in the API is documented with the following information: Signature : The function&#39;s parameter types and return value Implementation Status : Current development status (stable, experimental, planned) Description : What the function does Parameters : Details about each parameter Returns : Description of what the function returns Examples : Code examples showing how to use the function Notes : Additional information, limitations, and best practices Script Lifecycle Hooks \u200b Your Lua scripts can implement several lifecycle hooks that are called at specific points during execution: Hook Status Description Initialize() \u2705 Stable Called when the script is first loaded Update() \u2705 Stable Called every frame OnConsoleReady() \u2705 Stable Called when the console is loaded and ready OnPlayerReady() \u2705 Stable Called when the player is loaded and ready OnSceneLoaded(sceneName) \u2705 Stable Called when a new scene is loaded OnDayChanged(day) \ud83d\udd04 Partial Called when the game day changes OnTimeChanged(time) \ud83d\udd04 Partial Called when the game time changes OnPlayerHealthChanged(newHealth) \ud83d\udd04 Partial Called when player health changes OnPlayerEnergyChanged(newEnergy) \ud83d\udd04 Partial Called when player energy changes Shutdown() \u2705 Stable Called when the script is unloaded Contributing to the API \u200b ScheduleLua is an open-source project in active development. If you&#39;d like to contribute: Check the GitHub repository for current issues and tasks Join the Schedule 1 Modding Discord to discuss development Report bugs or suggest improvements through GitHub Issues For detailed information about"
    },
    {
        "title": "Script Structure | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/script-structure.html",
        "content": "Script Structure | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page Script Structure \u200b This guide covers the recommended structure for ScheduleLua scripts, explaining the key components and organization patterns to help you write clean, maintainable scripts. Basic Script Structure \u200b A well-structured ScheduleLua script typically includes these key sections: Header comment block Global variables Lifecycle hook functions Helper functions Custom event handlers Here&#39;s a skeleton template that you can use as a starting point: lua --[[ ScriptName.lua Description: Brief description of what this script does Author: Your Name Version: 1.0 ]] -- Global variables and state local someState = nil local someOtherState = false local lastUpdate = 0 -- Initialize function - called when script is loaded function Initialize () Log ( &quot;Script initializing...&quot; ) -- Setup code here end -- Update function - called every frame function Update () -- Performance optimization: Only run expensive operations every 10 frames if Time. frameCount - lastUpdate &lt; 10 then return end lastUpdate = Time. frameCount -- Main update logic here end -- Console ready hook function OnConsoleReady () -- Register commands RegisterCommand ( &quot;mycommand&quot; , &quot;Description&quot; , &quot;usage&quot; , CommandHandler) end -- Player ready hook function OnPlayerReady () -- Player initialization someState = GetPlayerPosition () Log ( &quot;Player ready at position: &quot; .. someState. x .. &quot;, &quot; .. someState. y .. &quot;, &quot; .. someState. z ) end -- Other lifecycle hooks function OnSceneLoaded (sceneName) -- Scene-specific logic end function OnDayChanged (day) -- Day change logic end -- Command handlers function CommandHandler (args) -- Handle command logic Log ( &quot;Command executed with args: &quot; .. table.concat (args, &quot;, &quot; )) end -- Custom helper functions function CalculateSomething (value1, value2) return value1 * value2 end -- Custom event handlers function OnCustomEvent () -- Handle custom events end -- Shutdown function - called when script is unloaded function Shutdown () -- Cleanup code UnregisterCommand ( &quot;mycommand&quot; ) Log ( &quot;Script shutdown complete&quot; ) end Organizing State Management \u200b For complex scripts, it&#39;s often helpful to group related state variables into tables: lua -- Player state tracking local playerState = { position = nil , health = 100 , energy = 100 , region = nil , inventory = {} } -- NPC tracking local npcState = { tracked = {}, lastInteraction = nil } -- Game state tracking local gameState = { time = 0 , day = 1 , isNight = false } This approach makes it easier to pass state around and keep related data organized. Handling Commands \u200b When registering multiple commands, it&#39;s best to group them together in the OnConsoleReady function: lua function OnConsoleReady () -- Player information commands RegisterCommand ( &quot;pos&quot; , &quot;Shows player position&quot; , &quot;pos&quot; , CommandPosition) RegisterCommand ( &quot;health&quot; , &quot;Shows player health&quot; , &quot;health&quot; , CommandHealth) -- World information commands RegisterCommand ( &quot;time&quot; , &quot;Shows current game time&quot; , &quot;time&quot; , CommandTime) RegisterCommand ( &quot;npcs&quot; , &quot;Shows nearby NPCs&quot; , &quot;npcs [radius]&quot; , CommandNPCs) -- Utility commands RegisterCommand ( &quot;help&quot; , &quot;Shows available commands&quot; , &quot;help&quot; , CommandHelp) end function CommandPosition (args) local pos = GetPlayerPosition () Log ( &quot;Position: &quot; .. pos. x .. &quot;, &quot; .. pos. y .. &quot;, &quot; .. pos. z ) end function CommandHealth (args) Log ( &quot;Health: &quot; .. GetPlayerHealth ()) end -- Other command handlers... Managing Complex Update Logic \u200b For scripts with complex update logic, split the functionality into separate functions: lua function Update () -- Only run expensive checks every few frames if Time. frameCount % 5 == 0 then CheckPlayerStatus () end -- Run less frequently if Time. frameCount % 30 == 0 then CheckWorldState () end -- Always run HandleImportantEvents () end function CheckPlayerStatus () -- Player status checking logic end function CheckWorldState () -- World state checking logic end functi"
    },
    {
        "title": "Script Lifecycle Hooks | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/lifecycle-hooks.html",
        "content": "Script Lifecycle Hooks | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page Script Lifecycle Hooks \u200b ScheduleLua provides several lifecycle hooks that allow your script to respond to various game events. This guide explains each hook, when it&#39;s called, and how to use it effectively. Overview \u200b Lifecycle hooks are functions with specific names that ScheduleLua calls at particular points during script and game execution. By implementing these functions in your script, you can respond to events like script initialization, game updates, player state changes, and more. Available Hooks \u200b Initialize \u200b lua function Initialize () -- Initialization code here end The Initialize function is called when your script is first loaded. Best Practice: Use this function for: Setting up initial variables Registering event listeners Initializing script state Performing compatibility checks Update \u200b lua function Update () -- Code to run every frame end The Update function is called every frame while the game is running. This is where you can implement continuous monitoring and real-time reactions. Best Practice: Because Update runs frequently, you should: Avoid expensive operations Use flags or timers to limit how often certain code runs Focus on critical real-time functionality Consider using coroutines for delayed operations OnConsoleReady \u200b lua function OnConsoleReady () -- Code to run when console is ready RegisterCommand ( &quot;mycommand&quot; , &quot;Description&quot; , &quot;usage&quot; , function (args) -- Command implementation end ) end The OnConsoleReady function is called when the game console is fully loaded and ready to accept commands. This is the ideal place to register custom console commands. OnPlayerReady \u200b lua function OnPlayerReady () -- Code to run when player is loaded local playerPos = GetPlayerPosition () Log ( &quot;Player ready at position: &quot; .. playerPos. x .. &quot;, &quot; .. playerPos. y .. &quot;, &quot; .. playerPos. z ) end The OnPlayerReady function is called when the player character is fully loaded and ready. This is when you can safely access player data, inventory, position, etc. OnSceneLoaded \u200b lua function OnSceneLoaded (sceneName) Log ( &quot;Scene loaded: &quot; .. sceneName) -- Code to run when a new scene is loaded end The OnSceneLoaded function is called whenever a new scene is loaded. The sceneName parameter provides the name of the loaded scene. OnDayChanged \u200b lua function OnDayChanged (day) Log ( &quot;Day changed to: &quot; .. day) -- Code to run when the game day changes end The OnDayChanged function is called when the game day changes. The day parameter provides the new day value. OnTimeChanged \u200b lua function OnTimeChanged (time) -- Code to run when game time changes -- &#39;time&#39; is provided in game time units if time % 6 == 0 then -- Only log every 6 time units Log ( &quot;Time is now: &quot; .. FormatGameTime (time)) end end The OnTimeChanged function is called when the game time changes. The time parameter provides the new time value. OnPlayerHealthChanged \u200b lua function OnPlayerHealthChanged (newHealth) Log ( &quot;Player health changed to: &quot; .. newHealth) if newHealth &lt; 30 then -- Provide healing items or warnings end end The OnPlayerHealthChanged function is called when the player&#39;s health changes. The newHealth parameter provides the new health value. OnPlayerEnergyChanged \u200b lua function OnPlayerEnergyChanged (newEnergy) Log ( &quot;Player energy changed to: &quot; .. newEnergy) if newEnergy &lt; 30 then -- Provide energy items or warnings end end The OnPlayerEnergyChanged function is called when the player&#39;s energy changes. The newEnergy parameter provides the new energy value. Shutdown \u200b lua function Shutdown () -- Cleanup code here UnregisterCommand ( &quot;mycommand&quot; ) Log ( &quot;Script shutdown complete&quot; ) end The Shutdown function is called when your script is being unloaded. It should perform any necessary cleanup like unregistering commands or releasing resources. Hook Execution Order \u200b When a script is loaded, hooks are called in this order: Initialize - When script is first loaded OnConsoleReady - When console is ready OnPlayerReady - When player is loaded and ready Update - Called every frame thereafter Other event hoo"
    },
    {
        "title": "ScheduleLua Best Practices | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/best-practices.html",
        "content": "ScheduleLua Best Practices | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page ScheduleLua Best Practices \u200b Overview This guide outlines best practices and recommendations to help you create efficient, maintainable, and reliable scripts with ScheduleLua, based on the official Lua 5.2 Reference Manual . Script Structure and Organization \u200b Script Lifecycle \u200b Implement the following key lifecycle functions in your scripts to ensure proper initialization, execution, and cleanup: Initialize() : For setup when the script loads. Always return true . Update() : Called every frame (use cautiously to avoid performance issues). OnPlayerReady() : Called when the player entity is fully initialized. OnConsoleReady() : Called when the game console is fully initialized. OnSceneLoaded(sceneName) : Called when a scene is loaded. Shutdown() : For cleanup and resource de-allocation when the script is unloaded. Example: lua function Initialize () Log ( &quot;Script initialized!&quot; ) end function Shutdown () UnregisterAllCommands () Log ( &quot;Script shutdown complete&quot; ) end Keep Scripts Focused \u200b Create scripts that serve a single purpose or feature Split complex systems into multiple interrelated scripts Use descriptive filenames that reflect functionality Variable Scope \u200b Avoid Global Variables According to the Lua 5.2 Manual: 2.2 - Environments and the Global Environment , global variables can cause unexpected conflicts between scripts. Minimize global variables to prevent namespace conflicts Use local variables whenever possible ( Lua 5.2 Manual: 3.3.7 - Local Declarations ) Prefix globals with your mod name if necessary lua -- Bad playerInventory = {} -- Creates a global variable -- Good local playerInventory = {} -- Properly scoped local variable -- If global is needed MyMod_PlayerInventory = {} -- Prefixed global to avoid conflicts Modularizing Your Scripts \u200b Organize related functionality into modules to improve code organization, reusability, and maintainability. This approach follows Lua&#39;s module pattern ( Lua 5.2 Manual: 6.3 - Modules ), as demonstrated in ScheduleLua examples. Using Tables as Modules \u200b Group related functions in a table to create a module. This is the standard Lua 5.2 approach for creating modules: lua -- Create a module for economy-related functions local EconomyModule = {} -- Table that will act as our module -- Add functions to the module function EconomyModule . ShowBalance () local cash = GetPlayerCash () local online = GetPlayerOnlineBalance () Log ( &quot;Cash: &quot; .. FormatMoney (cash) .. &quot;, Online: &quot; .. FormatMoney (online)) end function EconomyModule . TransferToOnline (amount) if not amount or amount &lt;= 0 then LogWarning ( &quot;Amount must be positive&quot; ) return false end if RemovePlayerCash (amount) and AddOnlineBalance (amount) then Log ( &quot;Transferred &quot; .. FormatMoney (amount) .. &quot; to online balance&quot; ) return true end return false end -- You can return the module if you want to use it in other scripts -- This pattern follows Lua 5.2&#39;s module practices return EconomyModule Module Initialization \u200b Initialize your modules in a structured way, especially when they depend on game systems that might not be immediately available: lua -- Economy module following ScheduleLua patterns local EconomyFunctions = {} local isInitialized = false -- File-scoped private variable -- Initialize the module function InitializeEconomyModule () if isInitialized then return end Log ( &quot;Initializing economy module...&quot; ) -- Do any setup needed isInitialized = true end -- Display player&#39;s money information function EconomyFunctions . ShowPlayerMoneyInfo () local cash = GetPlayerCash () local online = GetPlayerOnlineBalance () local lifetime = GetLifetimeEarnings () local netWorth = GetNetWorth () Log ( &quot;====== Player Money Information ======&quot; ) Log ( &quot;Cash on hand: &quot; .. FormatMoney (cash)) Log ( &quot;Online balance: &quot; .. FormatMoney (online)) Log ( &quot;Lifetime earnings: &quot; .. FormatMoney (lifetime)) Log ( &quot;Net worth: &quot; .. FormatMoney (netWorth)) Log ( &quot;======================================&quot; ) end -- Transfer money between cash and online balance function EconomyFunctions . TransferToOnlineB"
    },
    {
        "title": "ScheduleLua Limitations | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/limitations.html",
        "content": "ScheduleLua Limitations | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page ScheduleLua Limitations \u200b Beta Software ScheduleLua is currently in beta development. Many features are still being implemented and bugs are expected. Current Limitations \u200b While ScheduleLua provides a powerful Lua 5.2 scripting environment for Schedule 1, there are several important limitations to be aware of: Limited Game Feature Access \u200b Partial API Coverage : Many game systems are not yet accessible through the API In-Development Functions : Some documented functions may have incomplete implementations Missing Game Systems : Several core game features don&#39;t have corresponding API methods yet Known Issues \u200b Stability Issues : Some API functions may crash or behave unexpectedly in certain scenarios Performance Limitations : Complex scripts may impact game performance, especially when using the Update() hook Error Handling : Error messages may not always clearly indicate the source of problems Hot-Reloading : Reloading scripts during gameplay may cause unpredictable behavior Multiplayer Considerations \u200b Multiplayer Warning ScheduleLua does not handle networking or synchronization between game clients. Using ScheduleLua in multiplayer games can cause desyncs, unintended behavior, or crashes. No Network Synchronization : Changes made by scripts are not synchronized between clients Client-Side Only : All operations happen locally and are not server-authoritative Potential for Desyncs : Scripts modifying game state will cause clients to diverge in behavior No Multiplayer Events : There are no events for networking or player join/leave detection Development Roadmap \u200b Many of these limitations are being addressed in ongoing development. Check the Development Status page for the most up-to-date information on planned features and fixes. Best Practices for Working with Limitations \u200b Despite these limitations, you can still create useful scripts by: Testing Thoroughly : Verify your scripts work as expected in different game scenarios Using Stable APIs : Focus on using fully implemented features (marked as \u2705 in documentation) Error Checking : Always check return values and implement error handling Performance Optimization : Minimize work done in frequently called functions like Update() Avoiding Multiplayer : Use scripts in single-player mode only, until multiplayer support is added Reporting Issues \u200b If you encounter bugs or unexpected behavior, please report them on the GitHub issue tracker or discuss them in the Discord community . Your feedback is essential for improving ScheduleLua! Help improve this page Last updated: Pager Previous page Best Practices Next page How to Contribute Released as Beta Software under the GPL-3.0 License. Built with VitePress window.__VP_HASH_MAP__=JSON.parse(\"{\\\"api_core_commands.md\\\":\\\"Bk-HA0si\\\",\\\"api_core_gameobjects.md\\\":\\\"BCEKvkno\\\",\\\"api_core_logging.md\\\":\\\"BJhEtnWE\\\",\\\"api_core_timing.md\\\":\\\"DqUutz9D\\\",\\\"api_economy_atm.md\\\":\\\"CnC_eQ9C\\\",\\\"api_economy_index.md\\\":\\\"B1eutHxq\\\",\\\"api_economy_money.md\\\":\\\"DKOu9caE\\\",\\\"api_economy_transactions.md\\\":\\\"LdadQiQh\\\",\\\"api_helper_index.md\\\":\\\"BEuHsPL8\\\",\\\"api_index.md\\\":\\\"Dlgp4_ax\\\",\\\"api_law_curfew.md\\\":\\\"s18xc-dW\\\",\\\"api_law_index.md\\\":\\\"DaDl-IY-\\\",\\\"api_map_index.md\\\":\\\"DXGMpS-6\\\",\\\"api_npc_finding.md\\\":\\\"BZc8CBMU\\\",\\\"api_npc_index.md\\\":\\\"lqJ9VM8g\\\",\\\"api_npc_managing.md\\\":\\\"D3k8TSPN\\\",\\\"api_npc_schedule.md\\\":\\\"BmdhO90W\\\",\\\"api_player_index.md\\\":\\\"DhPwfxL6\\\",\\\"api_player_inventory.md\\\":\\\"CyC5NQxt\\\",\\\"api_player_movement.md\\\":\\\"BLnpf70g\\\",\\\"api_player_status.md\\\":\\\"o6-kcMTr\\\",\\\"api_time_events.md\\\":\\\"Czf5VsUr\\\",\\\"api_time_game-time.md\\\":\\\"BXyoqc79\\\",\\\"api_ui_custom-ui.md\\\":\\\"B4zoGN7e\\\",\\\"api_ui_dialogs.md\\\":\\\"C0-jjdJt\\\",\\\"api_ui_index.md\\\":\\\"Ch8ck-6A\\\",\\\"api_ui_messages.md\\\":\\\"BSCa7VuW\\\",\\\"api_ui_notifications.md\\\":\\\"CT78aPWp\\\",\\\"doc_organization.md\\\":\\\"Cpe3KE15\\\",\\\"examples_curfew.md\\\":\\\"DJNQMgUl\\\",\\\"examples_economy.md\\\":\\\"DJIVBdhl\\\",\\\"examples_index.md\\\":\\\"DWNL_JRq\\\",\\\"examples_registry.md\\\":\\\"D0WBUEfg\\\",\\\"examples_ui.md\\\":\\\"G79LgWwX\\\",\\\"guide_best-practices.md\\\":\\\"Dt6g62hX\\\",\\\"guide_contributing.md\\\":\\\"DgXXCjeV\\\",\\\"guide_development-status.md\\\":\\\"BKMijw8E\\\",\\\"guide_getting-started.md\\\":\\\"Ce_5sbDf\\\",\\\"guide_index.md\\\":\\\"LG02Z1rF\\\",\\\"guide_installation."
    },
    {
        "title": "Contributing to ScheduleLua | ScheduleLua Documentation (Beta)",
        "url": "https://schedulelua.github.io/ScheduleLua-Docs/guide/contributing.html",
        "content": "Contributing to ScheduleLua | ScheduleLua Documentation (Beta) (()=>{const e=localStorage.getItem(\"vitepress-theme-appearance\")||\"auto\",a=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;(!e||e===\"auto\"?a:e===\"dark\")&&document.documentElement.classList.add(\"dark\")})(); document.documentElement.classList.toggle(\"mac\",/Mac|iPhone|iPod|iPad/i.test(navigator.platform)); Skip to content ScheduleLua (Beta) Search K Main Navigation Home Guide API Reference Examples Development GitHub Repository Issue Tracker Discord Community Appearance Menu Return to top Sidebar Navigation Getting Started Introduction Installation Getting Started Development Status Core Concepts Script Structure Lifecycle Hooks Best Practices Limitations Contributing How to Contribute Reporting Issues On this page Contributing to ScheduleLua \u200b Thank you for your interest in contributing to ScheduleLua! This guide will help you understand how to contribute to the project effectively. Ways to Contribute \u200b There are several ways you can contribute to ScheduleLua: Code contributions : Implement new features or fix bugs Documentation : Improve existing documentation or add new guides Examples : Create example scripts that demonstrate API usage Bug reports : Report issues you encounter Feature requests : Suggest new features or improvements Community support : Help other users in discussions and forums Setting Up Development Environment \u200b Prerequisites \u200b Visual Studio MelonLoader MoonSharp Interpreter (.NET 3.5) - Download the latest release and extract the .NET 3.5 DLL from interpreter/net35/MoonSharp.Interpreter.dll Basic knowledge of C# and Lua Getting the Source \u200b Fork the repository on GitHub Clone your fork locally: git clone https://github.com/YOUR-USERNAME/ScheduleLua.git Add the upstream repository as a remote: git remote add upstream https://github.com/ScheduleLua/ScheduleLua-Framework.git Building the Project \u200b Open the solution file ( ScheduleLua.sln ) in Visual Studio Add the MoonSharp .NET 3.5 DLL as an assembly reference to the project Right-click on &quot;References&quot; in Solution Explorer Select &quot;Add Reference...&quot; Click &quot;Browse&quot; and locate the MoonSharp DLL you downloaded Click &quot;Add&quot; and then &quot;OK&quot; Build the solution The compiled DLL will be copied to your Schedule 1 mods folder, and Visual Studio will start your Schedule 1 game Contribution Workflow \u200b Fork the repository : Create your own fork of the ScheduleLua repository on GitHub Click the &quot;Fork&quot; button at the top right of the ScheduleLua repository Clone your fork : Download your fork to your local machine git clone https://github.com/YOUR-USERNAME/ScheduleLua.git cd ScheduleLua Make your changes : Implement your feature or fix the bug Follow coding standards : Use consistent indentation (4 spaces) Follow C# naming conventions Include XML documentation comments for public APIs Add appropriate exception handling Test your changes : Ensure your changes work as expected in the game Commit your changes : Use clear commit messages that explain what and why git commit -m &quot;Added feature: description of what was added&quot; Push to your fork : Upload your changes to your GitHub fork git push origin main Create a Pull Request : Go to the original ScheduleLua repository and click &quot;New Pull Request&quot; Select &quot;compare across forks&quot; Select your fork and branch as the source The main ScheduleLua repository and branch as the destination Fill out the PR template with a clear description of your changes Respond to feedback : Be prepared to make additional changes based on the code review Keeping Your Fork Updated \u200b Regularly sync your fork with the upstream repository: git remote add upstream https://github.com/ScheduleLua/ScheduleLua-Framework.git git fetch upstream git checkout main git merge upstream/main git push origin main For Documentation Changes \u200b The ScheduleLua documentation uses VitePress, a static site generator optimized for documentation sites. When contributing to documentation: Focus on Markdown Files : All documentation is in Markdown files in the docs/ directory Each .md file becomes a page in the documentation site File names become part of the URL structure Follow VitePress Conventions : Use standard Markdown for most content Organize content with proper headings (starting with ## for main sections) Use relative links to reference other documentation pages Use VitePress-specific Features : Use :::tip , :::warning , and :::danger containers for callouts Use code blocks with syntax highlighting by specifying the language: ```lua Preview Your Changes : Install dependencies: npm install Start local dev server: npm run docs:dev Your changes will be visible at http://localhost:5173/ Keep Documentation Consistent : Follow existing documentation style and tone Use the same formatting patterns as other pages Keep explanations clear and concise with examples Submit Documentation PRs the same way as code PRs: Push changes to your fork"
    }
]